# file: action.yml
name: 'Repo Slice'
author: 'AlienHeadwars'
description: 'Slices a repository and optionally pushes it to a new branch.'

inputs:
  manifest:
    description: 'The manifest content, provided as an inline string.'
    required: false
  manifestFile:
    description: 'Path to the manifest file containing filter rules.'
    required: false
  source:
    description: 'The source directory to read from.'
    required: false
    default: '.'
  output:
    description: 'The destination directory. If not set, a temporary directory will be created.'
    required: false
  extension-map:
    description: 'A comma-separated list of `old:new` extension pairs to remap (e.g., `tsx:ts,mdx:md`).'
    required: false
  push-branch-name:
    description: 'The name of the branch to push the sliced contents to. If not set, no push will be performed.'
    required: false
  commit-message:
    description: 'The commit message to use when pushing the sliced branch.'
    required: false
    default: 'chore: Update repository slice'
  local-binary-path:
    description: 'Path to a local repo-slice binary. If set, the download step will be skipped. For testing purposes.'
    required: false

outputs:
  slice-path:
    description: "The path to the generated slice directory."
    value: ${{ steps.slice.outputs.path }}

runs:
  using: "composite"
  steps:
    - name: Prepare binary path
      id: binary_path
      shell: bash
      run: |
        if [ -n "${{ inputs.local-binary-path }}" ]; then
          echo "path=${{ inputs.local-binary-path }}" >> $GITHUB_OUTPUT
        else
          TEMP_DIR=$(mktemp -d)
          echo "path=$TEMP_DIR/repo-slice" >> $GITHUB_OUTPUT
          echo "dir=$TEMP_DIR" >> $GITHUB_OUTPUT
        fi

    - name: Download and prepare binary
      if: "inputs.local-binary-path == ''"
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
        TEMP_DIR: ${{ steps.binary_path.outputs.dir }}
      run: |
        VERSION="v0.0.27" # Hardcoded version for stability
        echo "Downloading repo-slice binary for version $VERSION..."
        
        OS_ARCH=""
        case "${{ runner.os }}:${{ runner.arch }}" in
          Linux:X64)   OS_ARCH="linux_amd64" ;;
          Linux:ARM64) OS_ARCH="linux_arm64" ;;
          macOS:X64)   OS_ARCH="darwin_amd64" ;;
          macOS:ARM64) OS_ARCH="darwin_arm64" ;;
          Windows:X64) OS_ARCH="windows_amd64" ;;
          Windows:ARM64) OS_ARCH="windows_arm64" ;;
          *)
            echo "Error: Unsupported runner OS/architecture combination: ${{ runner.os }}/${{ runner.arch }}" >&2
            exit 1
            ;;
        esac

        ASSET_NAME="repo-slice_${VERSION#v}_${OS_ARCH}.tar.gz"
        
        # Download to the temporary directory
        gh release download "$VERSION" --pattern "$ASSET_NAME" --repo "AlienHeadWars/repo-slice" --clobber -D "$TEMP_DIR"
              
        # Unpack in the temporary directory  
        tar -xzf "$TEMP_DIR/$ASSET_NAME" -C "$TEMP_DIR"
        chmod +x "$TEMP_DIR/repo-slice"

    - name: Run repo-slice
      id: slice
      shell: bash
      run: |
        # Validate that exactly one manifest input is provided.
        if [ -n "${{ inputs.manifest }}" ] && [ -n "${{ inputs.manifestFile }}" ]; then
          echo "Error: Both 'manifest' and 'manifestFile' inputs cannot be used simultaneously." >&2
          exit 1
        fi
        if [ -z "${{ inputs.manifest }}" ] && [ -z "${{ inputs.manifestFile }}" ]; then
          echo "Error: Exactly one of 'manifest' or 'manifestFile' must be provided." >&2
          exit 1
        fi

        OUTPUT_PATH="${{ inputs.output }}"
        if [ -z "$OUTPUT_PATH" ]; then
          OUTPUT_PATH=$(mktemp -d)
        fi

        # Determine which binary to use
        BINARY_PATH="${{ steps.binary_path.outputs.path }}"
        if [ -n "${{ inputs.local-binary-path }}" ]; then
          BINARY_PATH="${{ inputs.local-binary-path }}"
        fi

        # Handle the manifest input.

        MANIFEST_PATH=""
        if [ -n "${{ inputs.manifest }}" ]; then
          MANIFEST_PATH=$(mktemp)
          echo "${{ inputs.manifest }}" > "$MANIFEST_PATH"
        else
          MANIFEST_PATH="${{ inputs.manifestFile }}"
        fi

        # Construct and execute the repo-slice command.
        CMD="$BINARY_PATH --manifest \"$MANIFEST_PATH\" --source \"${{ inputs.source }}\" --output \"$OUTPUT_PATH\""
        if [ -n "${{ inputs.extension-map }}" ]; then
          CMD="$CMD --extension-map \"${{ inputs.extension-map }}\""
        fi

        echo "Executing: $CMD"
        eval "$CMD"
        echo "path=$OUTPUT_PATH" >> $GITHUB_OUTPUT

    - name: Prepare repository for push
      if: "inputs.push-branch-name != ''"
      shell: bash
      run: |
        rsync -a ./.git/ "${{ steps.slice.outputs.path }}/.git/"

    - name: Push to branch
      if: "inputs.push-branch-name != ''"
      uses: stefanzweifel/git-auto-commit-action@778341af668090896ca464160c2def5d1d1a3eb0 # Pinned to v6.0.1
      with:
        repository: ${{ steps.slice.outputs.path }}
        commit_message: ${{ inputs.commit-message }}
        branch: ${{ inputs.push-branch-name }}
        push_options: '--force'