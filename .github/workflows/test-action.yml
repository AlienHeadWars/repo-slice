# .github/workflows/test-action.yml
name: Test Action

on:
  pull_request:
    branches:
      - 'main'

jobs:
  test_with_manifest_file:
    name: "Test with manifest-file"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Build repo-slice binary
        run: go build -o ./repo-slice-test ./cmd/repo-slice

      - name: Create test manifest
        run: |
          echo "+ ." > test-manifest.txt
          echo "- go.mod" >> test-manifest.txt

      - name: Run repo-slice action
        id: slice
        uses: ./ # Uses the action in the current repository
        with:
          manifest-file: 'test-manifest.txt'
          output: 'test-output'
          local-binary-path: ./repo-slice-test

      - name: Verify slice contents
        run: |
          echo "Verifying contents of ${{ steps.slice.outputs.slice-path }}..."
          ls -R ${{ steps.slice.outputs.slice-path }}
          test -f "${{ steps.slice.outputs.slice-path }}/README.md"
          ! test -f "${{ steps.slice.outputs.slice-path }}/go.mod"

  test_with_inline_manifest:
    name: "Test with inline manifest"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Build repo-slice binary
        run: go build -o ./repo-slice-test ./cmd/repo-slice

      - name: Run repo-slice action
        id: slice
        uses: ./
        with:
          manifest: |
            + .
            - go.mod
          output: 'test-output'
          local-binary-path: ./repo-slice-test

      - name: Verify slice contents
        run: |
          echo "Verifying contents of ${{ steps.slice.outputs.slice-path }}..."
          ls -R ${{ steps.slice.outputs.slice-path }}
          test -f "${{ steps.slice.outputs.slice-path }}/README.md"
          ! test -f "${{ steps.slice.outputs.slice-path }}/go.mod"

  test_with_temp_directory:
    name: "Test with temporary output directory"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Build repo-slice binary
        run: go build -o ./repo-slice-test ./cmd/repo-slice

      - name: Create test manifest
        run: |
          echo "+ ." > test-manifest.txt
          echo "- go.mod" >> test-manifest.txt

      - name: Run repo-slice action without output
        id: slice
        uses: ./
        with:
          manifest-file: 'test-manifest.txt'
          local-binary-path: ./repo-slice-test

      - name: Verify slice contents in temp dir
        run: |
          echo "Verifying contents of ${{ steps.slice.outputs.slice-path }}..."
          ls -R ${{ steps.slice.outputs.slice-path }}
          test -f "${{ steps.slice.outputs.slice-path }}/README.md"
          ! test -f "${{ steps.slice.outputs.slice-path }}/go.mod"

  test_with_extension_map:
    name: "Test with extension-map"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Build repo-slice binary
        run: go build -o ./repo-slice-test ./cmd/repo-slice

      - name: Create test file for remapping
        run: |
          mkdir -p test-remap
          touch test-remap/component.tsx

      - name: Run repo-slice action with extension-map
        id: slice
        uses: ./
        with:
          manifest: |
            + /test-remap/
          output: 'test-output'
          local-binary-path: ./repo-slice-test
          extension-map: |
            tsx:ts

      - name: Verify remapped file
        run: |
          echo "Verifying remapped file in ${{ steps.slice.outputs.slice-path }}..."
          ls -R ${{ steps.slice.outputs.slice-path }}
          test -f "${{ steps.slice.outputs.slice-path }}/test-remap/component.ts"
          ! test -f "${{ steps.slice.outputs.slice-path }}/test-remap/component.tsx"

  test_for_failure:
    name: "Test for input validation failure"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run repo-slice action with both inputs
        id: slice
        uses: ./
        with:
          manifest: '+ .'
          manifest-file: 'manifest.txt'
          output: 'test-output'
        continue-on-error: true

      - name: Check failure status
        if: steps.slice.outcome != 'failure'
        run: |
          echo "Error: The action should have failed but it succeeded."
          exit 1